{"ast":null,"code":"var _jsxFileName = \"/Users/raina/Desktop/traduler_react/src/main/frontend/src/component/MyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Header from \"./Header\"; // Import the CSS file for styling\nimport { useNavigate } from \"react-router-dom\";\nimport MyCalendar from \"../MyCalendar\";\nimport './../style/MyCalendar.css';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport FullCalendar from '@fullcalendar/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MyPage = () => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    console.log(\"storage :: \" + localStorage.getItem('watched'));\n  }, []);\n  const handleDrop = info => {\n    // 이벤트를 드롭한 후의 처리 로직을 구현합니다.\n    // info.draggedEl에는 드래그한 이벤트 엘리먼트가 포함되어 있습니다.\n    // info.date에는 드롭한 날짜가 포함되어 있습니다.\n\n    // 이벤트를 업데이트하거나 서버로 이동하는 등의 작업을 수행할 수 있습니다.\n\n    // 예시: 드롭한 이벤트의 ID를 출력합니다.\n    console.log('Dropped event ID:', info.draggedEl.dataset.eventId);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-head\",\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin],\n        initialView: \"dayGridMonth\",\n        editable: true,\n        droppable: true,\n        events: events,\n        ref: calendarRef,\n        eventDrop: handleDrop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MyPage, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = MyPage;\nexport default MyPage;\nvar _c;\n$RefreshReg$(_c, \"MyPage\");","map":{"version":3,"names":["React","useEffect","useState","Header","useNavigate","MyCalendar","dayGridPlugin","FullCalendar","jsxDEV","_jsxDEV","Fragment","_Fragment","MyPage","_s","navigate","console","log","localStorage","getItem","handleDrop","info","draggedEl","dataset","eventId","children","fileName","_jsxFileName","lineNumber","columnNumber","className","plugins","initialView","editable","droppable","events","ref","calendarRef","eventDrop","_c","$RefreshReg$"],"sources":["/Users/raina/Desktop/traduler_react/src/main/frontend/src/component/MyPage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Header from \"./Header\"; // Import the CSS file for styling\nimport { useNavigate } from \"react-router-dom\";\nimport MyCalendar from \"../MyCalendar\";\nimport './../style/MyCalendar.css'\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport FullCalendar from '@fullcalendar/react';\n\n\nconst MyPage = () => {\n    const navigate = useNavigate();\n\n    useEffect( () => {\n        console.log(\"storage :: \" + localStorage.getItem('watched'))\n    }, [])\n\n    const handleDrop = (info) => {\n        // 이벤트를 드롭한 후의 처리 로직을 구현합니다.\n        // info.draggedEl에는 드래그한 이벤트 엘리먼트가 포함되어 있습니다.\n        // info.date에는 드롭한 날짜가 포함되어 있습니다.\n\n        // 이벤트를 업데이트하거나 서버로 이동하는 등의 작업을 수행할 수 있습니다.\n\n        // 예시: 드롭한 이벤트의 ID를 출력합니다.\n        console.log('Dropped event ID:', info.draggedEl.dataset.eventId);\n    };\n\n    return (\n        <>\n            <Header/>\n            <div className='calendar-head' >\n                <FullCalendar\n                    plugins={[dayGridPlugin]}\n                    initialView=\"dayGridMonth\"\n                    editable={true}\n                    droppable={true}\n                    events={events}\n                    ref={calendarRef}\n                    eventDrop={handleDrop}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default MyPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAC;AAC/B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAO,2BAA2B;AAClC,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,YAAY,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG/C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,QAAQ,GAAGV,WAAW,EAAE;EAE9BH,SAAS,CAAE,MAAM;IACbc,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAIC,IAAI,IAAK;IACzB;IACA;IACA;;IAEA;;IAEA;IACAL,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEI,IAAI,CAACC,SAAS,CAACC,OAAO,CAACC,OAAO,CAAC;EACpE,CAAC;EAED,oBACId,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA,CAACN,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACTnB,OAAA;MAAKoB,SAAS,EAAC,eAAe;MAAAL,QAAA,eAC1Bf,OAAA,CAACF,YAAY;QACTuB,OAAO,EAAE,CAACxB,aAAa,CAAE;QACzByB,WAAW,EAAC,cAAc;QAC1BC,QAAQ,EAAE,IAAK;QACfC,SAAS,EAAE,IAAK;QAChBC,MAAM,EAAEA,MAAO;QACfC,GAAG,EAAEC,WAAY;QACjBC,SAAS,EAAElB;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACxB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA;EAAA,gBACP;AAEX,CAAC;AAACf,EAAA,CAlCID,MAAM;EAAA,QACSR,WAAW;AAAA;AAAAkC,EAAA,GAD1B1B,MAAM;AAoCZ,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}