{"ast":null,"code":"const handleEventDrop = info => {\n  const {\n    event\n  } = info;\n  const eventId = event.extendedProps.eventId;\n\n  // Check if the event is an external event\n  const isExternalEvent = state.externalEvents.some(externalEvent => externalEvent.placeId === eventId);\n  if (isExternalEvent) {\n    // Remove the event from the external events list\n    const updatedExternalEvents = state.externalEvents.filter(externalEvent => externalEvent.placeId !== eventId);\n    setState(prevState => ({\n      ...prevState,\n      externalEvents: updatedExternalEvents\n    }));\n\n    // Remove the event element from the DOM\n    const eventEl = info.draggedEl;\n    eventEl.parentNode.removeChild(eventEl);\n  }\n\n  // Update the dropped event's start and end times\n  const newEvents = [...events];\n  const index = newEvents.findIndex(e => e.id === eventId);\n  newEvents[index] = {\n    ...newEvents[index],\n    start: event.start,\n    end: event.end\n  };\n  setEvents(newEvents);\n  localStorage.setItem(\"watched\", JSON.stringify(newEvents));\n};","map":{"version":3,"names":["handleEventDrop","info","event","eventId","extendedProps","isExternalEvent","state","externalEvents","some","externalEvent","placeId","updatedExternalEvents","filter","setState","prevState","eventEl","draggedEl","parentNode","removeChild","newEvents","events","index","findIndex","e","id","start","end","setEvents","localStorage","setItem","JSON","stringify"],"sources":["/Users/raina/Desktop/traduler_react/src/main/frontend/src/component/MyPage.js"],"sourcesContent":["const handleEventDrop = (info) => {\n    const { event } = info;\n    const eventId = event.extendedProps.eventId;\n\n    // Check if the event is an external event\n    const isExternalEvent = state.externalEvents.some(\n        (externalEvent) => externalEvent.placeId === eventId\n    );\n\n    if (isExternalEvent) {\n        // Remove the event from the external events list\n        const updatedExternalEvents = state.externalEvents.filter(\n            (externalEvent) => externalEvent.placeId !== eventId\n        );\n        setState((prevState) => ({\n            ...prevState,\n            externalEvents: updatedExternalEvents,\n        }));\n\n        // Remove the event element from the DOM\n        const eventEl = info.draggedEl;\n        eventEl.parentNode.removeChild(eventEl);\n    }\n\n    // Update the dropped event's start and end times\n    const newEvents = [...events];\n    const index = newEvents.findIndex((e) => e.id === eventId);\n    newEvents[index] = {\n        ...newEvents[index],\n        start: event.start,\n        end: event.end,\n    };\n    setEvents(newEvents);\n    localStorage.setItem(\"watched\", JSON.stringify(newEvents));\n};\n"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,IAAI,IAAK;EAC9B,MAAM;IAAEC;EAAM,CAAC,GAAGD,IAAI;EACtB,MAAME,OAAO,GAAGD,KAAK,CAACE,aAAa,CAACD,OAAO;;EAE3C;EACA,MAAME,eAAe,GAAGC,KAAK,CAACC,cAAc,CAACC,IAAI,CAC5CC,aAAa,IAAKA,aAAa,CAACC,OAAO,KAAKP,OAAO,CACvD;EAED,IAAIE,eAAe,EAAE;IACjB;IACA,MAAMM,qBAAqB,GAAGL,KAAK,CAACC,cAAc,CAACK,MAAM,CACpDH,aAAa,IAAKA,aAAa,CAACC,OAAO,KAAKP,OAAO,CACvD;IACDU,QAAQ,CAAEC,SAAS,KAAM;MACrB,GAAGA,SAAS;MACZP,cAAc,EAAEI;IACpB,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMI,OAAO,GAAGd,IAAI,CAACe,SAAS;IAC9BD,OAAO,CAACE,UAAU,CAACC,WAAW,CAACH,OAAO,CAAC;EAC3C;;EAEA;EACA,MAAMI,SAAS,GAAG,CAAC,GAAGC,MAAM,CAAC;EAC7B,MAAMC,KAAK,GAAGF,SAAS,CAACG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKrB,OAAO,CAAC;EAC1DgB,SAAS,CAACE,KAAK,CAAC,GAAG;IACf,GAAGF,SAAS,CAACE,KAAK,CAAC;IACnBI,KAAK,EAAEvB,KAAK,CAACuB,KAAK;IAClBC,GAAG,EAAExB,KAAK,CAACwB;EACf,CAAC;EACDC,SAAS,CAACR,SAAS,CAAC;EACpBS,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS,CAAC,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}